name: Nextflow MacOS ARM64 Pipelines

on:
  workflow_dispatch:
  push:
    paths:
      - "pipelines/macos-arm64/nextflow-pixi/**"
      - "pipelines/macos-arm64/nextflow-conda/**"
      - ".github/workflows/macos-arm64.yml"
  schedule:
    - cron: "0 11 * * *" # Daily at 11:00 UTC (12:00 BST)

jobs:
  macos-arm64-pixi:
    name: Pixi Pipeline
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install tracer
        continue-on-error: true
        run: |
          echo "Installing tracer..."
          curl -sSL https://install.tracer.cloud | bash || echo "Tracer installation failed"
          source ~/.bashrc 2>/dev/null || true
          source ~/.bash_profile 2>/dev/null || true
          source ~/.zshrc 2>/dev/null || true
          echo "Searching for tracer binary..."
          TRACER_PATH=$(find /Users/runner -name "tracer" -type f 2>/dev/null | head -1)
          if [[ -n "$TRACER_PATH" ]]; then
            echo "‚úÖ Found tracer at: $TRACER_PATH"
            mkdir -p ~/bin
            ln -sf "$TRACER_PATH" ~/bin/tracer
            sudo ln -sf "$TRACER_PATH" /usr/local/bin/tracer 2>/dev/null || echo "Could not create /usr/local/bin symlink"
            echo "‚úÖ Tracer installation completed successfully"
          else
            echo "‚ùå Tracer binary not found after installation"
            echo "Installation may have failed, but continuing..."
          fi
          echo "$HOME/bin" >> $GITHUB_PATH
          echo "/usr/local/bin" >> $GITHUB_PATH

      - name: Run tracer init
        run: |
          echo "Searching for tracer binary..."
          POSSIBLE_PATHS=(
            "$HOME/bin/tracer"
            "$HOME/.local/bin/tracer"
            "$HOME/.tracerbio/bin/tracer"
            "/usr/local/bin/tracer"
            "/opt/tracer/bin/tracer"
          )
          TRACER_PATH=""
          for path in "${POSSIBLE_PATHS[@]}"; do
            if [ -f "$path" ]; then
              echo "‚úÖ Found tracer at: $path"
              TRACER_PATH="$path"
              break
            fi
          done
          if [ -z "$TRACER_PATH" ]; then
            echo "Searching entire system for tracer binary..."
            FOUND_TRACER=$(find /Users/runner -name "tracer" -type f 2>/dev/null | head -1)
            if [ -n "$FOUND_TRACER" ]; then
              echo "‚úÖ Found tracer at: $FOUND_TRACER"
              TRACER_PATH="$FOUND_TRACER"
            fi
          fi
          if [ -n "$TRACER_PATH" ] && [ -f "$TRACER_PATH" ]; then
            echo "Running tracer init with: $TRACER_PATH"
            sudo env "PATH=$PATH" "$TRACER_PATH" init --pipeline-name github-actions --environment github-actions --user-operator github-actions --pipeline-type nextflow --is-dev true
          else
            echo "‚ùå Tracer binary not found anywhere on the system"
            echo "This might indicate the tracer installation failed"
            echo "Skipping tracer init..."
          fi

      - name: Run pipeline with Pixi
        working-directory: pipelines/macos-arm64/nextflow-pixi
        run: |
          export PATH="$HOME/.pixi/bin:$PATH"
          echo "=== Running Nextflow Pipeline with Pixi ==="
          ./run.sh

      - name: Verify tracer packages
        env:
          # Configure the processes to check for (comma-separated list)
          REQUIRED_PROCESSES: "STAR,salmon,fasta_stats,counts"
        run: |
          echo "Searching for tracer binary..."
          POSSIBLE_PATHS=(
            "$HOME/bin/tracer"
            "$HOME/.local/bin/tracer"
            "$HOME/.tracerbio/bin/tracer"
            "/usr/local/bin/tracer"
            "/opt/tracer/bin/tracer"
          )
          TRACER_PATH=""
          for path in "${POSSIBLE_PATHS[@]}"; do
            if [ -f "$path" ]; then
              echo "‚úÖ Found tracer at: $path"
              TRACER_PATH="$path"
              break
            else
              echo "‚ùå Not found at: $path"
            fi
          done
          if [ -z "$TRACER_PATH" ]; then
            echo "Searching entire system for tracer binary..."
            FOUND_TRACER=$(find /Users/runner -name "tracer" -type f 2>/dev/null | head -1)
            if [ -n "$FOUND_TRACER" ]; then
              echo "‚úÖ Found tracer at: $FOUND_TRACER"
              TRACER_PATH="$FOUND_TRACER"
            fi
          fi
          if [ -n "$TRACER_PATH" ] && [ -f "$TRACER_PATH" ]; then
            echo "=== Running tracer info --json ==="
            TRACER_OUTPUT=$(sudo env "PATH=$PATH" "$TRACER_PATH" info --json)
            echo "Tracer output:"
            echo "$TRACER_OUTPUT"

            echo ""
            echo "=== Verifying required processes ==="

            # Parse the preview_processes field from the JSON output
            PREVIEW_PROCESSES=$(echo "$TRACER_OUTPUT" | jq -r '.run.preview_processes // empty')

            if [ -z "$PREVIEW_PROCESSES" ]; then
              echo "‚ùå ERROR: Could not find 'preview_processes' in tracer output"
              echo "This might indicate the pipeline is not running or tracer output format has changed"
              exit 1
            fi

            echo "Found preview_processes: $PREVIEW_PROCESSES"

            # Convert preview_processes to array (split by comma and trim whitespace)
            IFS=',' read -ra PREVIEW_ARRAY <<< "$PREVIEW_PROCESSES"
            PREVIEW_SET=()
            for proc in "${PREVIEW_ARRAY[@]}"; do
              # Trim whitespace and add to set
              trimmed=$(echo "$proc" | xargs)
              if [ -n "$trimmed" ]; then
                PREVIEW_SET+=("$trimmed")
              fi
            done

            echo "Parsed preview processes: ${PREVIEW_SET[*]}"

            # Convert comma-separated REQUIRED_PROCESSES to array
            IFS=',' read -ra REQUIRED_ARRAY <<< "$REQUIRED_PROCESSES"

            # Check each required process (exact match, order-independent)
            MISSING_PROCESSES=()
            for required_process in "${REQUIRED_ARRAY[@]}"; do
              # Trim whitespace
              required_process=$(echo "$required_process" | xargs)

              # Check if this required process exists in the preview set
              found=false
              for preview_process in "${PREVIEW_SET[@]}"; do
                if [ "$required_process" = "$preview_process" ]; then
                  found=true
                  break
                fi
              done

              if [ "$found" = true ]; then
                echo "‚úÖ Found required process: $required_process"
              else
                echo "‚ùå Missing required process: $required_process"
                MISSING_PROCESSES+=("$required_process")
              fi
            done

            # Report results
            if [ ${#MISSING_PROCESSES[@]} -eq 0 ]; then
              echo ""
              echo "üéâ SUCCESS: All required processes found in preview_processes"
              echo "Required: $REQUIRED_PROCESSES"
              echo "Found: $PREVIEW_PROCESSES"
            else
              echo ""
              echo "‚ùå FAILURE: Missing required processes"
              echo "Required: $REQUIRED_PROCESSES"
              echo "Found: $PREVIEW_PROCESSES"
              echo "Missing: $(IFS=','; echo "${MISSING_PROCESSES[*]}")"
              exit 1
            fi
          else
            echo "‚ùå Tracer binary not found anywhere on the system"
            echo "This might indicate the tracer installation failed"
            echo "Continuing without tracer verification..."
          fi

      - name: Upload pipeline results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pixi-arm64-pipeline-results
          path: |
            pipelines/macos-arm64/nextflow-pixi/results/
            pipelines/macos-arm64/nextflow-pixi/logs/
          retention-days: 7

  macos-arm64-conda:
    name: Conda Pipeline
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: 3.12
          miniforge-variant: Miniforge3
          miniforge-version: latest

      - name: Install tracer
        continue-on-error: true
        run: |
          echo "Installing tracer..."
          curl -sSL https://install.tracer.cloud/ | bash || echo "Tracer installation failed"
          source ~/.bashrc 2>/dev/null || true
          source ~/.bash_profile 2>/dev/null || true
          source ~/.zshrc 2>/dev/null || true
          echo "Searching for tracer binary..."
          TRACER_PATH=$(find /Users/runner -name "tracer" -type f 2>/dev/null | head -1)
          if [[ -n "$TRACER_PATH" ]]; then
            echo "‚úÖ Found tracer at: $TRACER_PATH"
            mkdir -p ~/bin
            ln -sf "$TRACER_PATH" ~/bin/tracer
            sudo ln -sf "$TRACER_PATH" /usr/local/bin/tracer 2>/dev/null || echo "Could not create /usr/local/bin symlink"
            echo "‚úÖ Tracer installation completed successfully"
          else
            echo "‚ùå Tracer binary not found after installation"
            echo "Installation may have failed, but continuing..."
          fi
          echo "$HOME/bin" >> $GITHUB_PATH
          echo "/usr/local/bin" >> $GITHUB_PATH

      - name: Run tracer init
        run: |
          echo "Searching for tracer binary..."
          POSSIBLE_PATHS=(
            "$HOME/bin/tracer"
            "$HOME/.local/bin/tracer"
            "$HOME/.tracerbio/bin/tracer"
            "/usr/local/bin/tracer"
            "/opt/tracer/bin/tracer"
          )
          TRACER_PATH=""
          for path in "${POSSIBLE_PATHS[@]}"; do
            if [ -f "$path" ]; then
              echo "‚úÖ Found tracer at: $path"
              TRACER_PATH="$path"
              break
            fi
          done
          if [ -z "$TRACER_PATH" ]; then
            echo "Searching entire system for tracer binary..."
            FOUND_TRACER=$(find /Users/runner -name "tracer" -type f 2>/dev/null | head -1)
            if [ -n "$FOUND_TRACER" ]; then
              echo "‚úÖ Found tracer at: $FOUND_TRACER"
              TRACER_PATH="$FOUND_TRACER"
            fi
          fi
          if [ -n "$TRACER_PATH" ] && [ -f "$TRACER_PATH" ]; then
            echo "Running tracer init with: $TRACER_PATH"
            sudo env "PATH=$PATH" "$TRACER_PATH" init --pipeline-name github-actions --environment github-actions --user-operator github-actions --pipeline-type nextflow --is-dev true
          else
            echo "‚ùå Tracer binary not found anywhere on the system"
            echo "This might indicate the tracer installation failed"
            echo "Skipping tracer init..."
          fi

      - name: Run pipeline with Conda
        working-directory: pipelines/macos-arm64/nextflow-conda
        run: |
          source ~/miniconda3/etc/profile.d/conda.sh
          echo "=== Running Nextflow Pipeline with Conda ==="
          ./run.sh

      - name: Check for tracer binary
        id: tracer_check
        run: |
          if command -v tracer >/dev/null 2>&1; then
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: Verify tracer packages
        if: steps.tracer_check.outputs.found == 'true'
        env:
          # Configure the processes to check for (comma-separated list)
          REQUIRED_PROCESSES: "STAR,FQ"
        run: |
          echo "=== Running tracer info --json ==="
          TRACER_OUTPUT=$(tracer info --json)
          echo "Tracer output:"
          echo "$TRACER_OUTPUT"

          echo ""
          echo "=== Verifying required processes ==="

          # Parse the preview_processes field from the JSON output
          PREVIEW_PROCESSES=$(echo "$TRACER_OUTPUT" | jq -r '.run.preview_processes // empty')

          if [ -z "$PREVIEW_PROCESSES" ]; then
            echo "‚ùå ERROR: Could not find 'preview_processes' in tracer output"
            echo "This might indicate the pipeline is not running or tracer output format has changed"
            exit 1
          fi

          echo "Found preview_processes: $PREVIEW_PROCESSES"

          # Convert preview_processes to array (split by comma and trim whitespace)
          IFS=',' read -ra PREVIEW_ARRAY <<< "$PREVIEW_PROCESSES"
          PREVIEW_SET=()
          for proc in "${PREVIEW_ARRAY[@]}"; do
            # Trim whitespace and add to set
            trimmed=$(echo "$proc" | xargs)
            if [ -n "$trimmed" ]; then
              PREVIEW_SET+=("$trimmed")
            fi
          done

          echo "Parsed preview processes: ${PREVIEW_SET[*]}"

          # Convert comma-separated REQUIRED_PROCESSES to array
          IFS=',' read -ra REQUIRED_ARRAY <<< "$REQUIRED_PROCESSES"

          # Check each required process (exact match, order-independent)
          MISSING_PROCESSES=()
          for required_process in "${REQUIRED_ARRAY[@]}"; do
            # Trim whitespace
            required_process=$(echo "$required_process" | xargs)

            # Check if this required process exists in the preview set
            found=false
            for preview_process in "${PREVIEW_SET[@]}"; do
              if [ "$required_process" = "$preview_process" ]; then
                found=true
                break
              fi
            done

            if [ "$found" = true ]; then
              echo "‚úÖ Found required process: $required_process"
            else
              echo "‚ùå Missing required process: $required_process"
              MISSING_PROCESSES+=("$required_process")
            fi
          done

          # Report results
          if [ ${#MISSING_PROCESSES[@]} -eq 0 ]; then
            echo ""
            echo "üéâ SUCCESS: All required processes found in preview_processes"
            echo "Required: $REQUIRED_PROCESSES"
            echo "Found: $PREVIEW_PROCESSES"
          else
            echo ""
            echo "‚ùå FAILURE: Missing required processes"
            echo "Required: $REQUIRED_PROCESSES"
            echo "Found: $PREVIEW_PROCESSES"
            echo "Missing: $(IFS=','; echo "${MISSING_PROCESSES[*]}")"
            exit 1
          fi

      - name: Upload pipeline results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: conda-arm64-pipeline-results
          path: |
            pipelines/macos-arm64/nextflow-conda/results/
            pipelines/macos-arm64/nextflow-conda/logs/
          retention-days: 7
