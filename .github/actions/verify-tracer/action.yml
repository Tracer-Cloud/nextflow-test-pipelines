name: "Verify Tracer Packages"
description: "Verifies that required processes are present in tracer info output"

inputs:
  is_ebpf:
    description: "Is ebpf being used to recognise the processes"
    required: true
  use_sudo:
    description: "Whether to use sudo when running tracer commands"
    required: false
    default: "false"
  binary:
    description: "Path to the tracer binary (if not provided, will search for it)"
    required: true
  required_processes_ebpf:
    description: "Comma-separated list of required processes for eBPF mode (defaults to STAR,FastQC,samtools sort)"
    required: false
    default: "STAR,FastQC,samtools sort"
  required_processes_polling:
    description: "Comma-separated list of required processes for polling mode (defaults to STAR,FastQC,salmon)"
    required: false
    default: "STAR,FastQC,salmon"

runs:
  using: "composite"
  steps:
    - name: Install jq
      shell: bash
      env:
        # Use pipeline-specific environment variables or defaults
        TRACER_REQUIRED_PROCESSES_EBPF: "${{ inputs.required_processes_ebpf }}"
        TRACER_REQUIRED_PROCESSES_POLLING: "${{ inputs.required_processes_polling }}"
      run: |
        if ! command -v jq &> /dev/null; then
          echo "Installing jq..."
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install jq
          elif [[ "$RUNNER_OS" == "Linux" ]]; then
            # Detect which package manager is available
            if command -v apt-get &> /dev/null; then
              echo "Using apt-get (Debian/Ubuntu)..."
              sudo apt-get update && sudo apt-get install -y jq
            elif command -v yum &> /dev/null; then
              echo "Using yum (Amazon Linux/RHEL/CentOS)..."
              sudo yum install -y jq
            elif command -v dnf &> /dev/null; then
              echo "Using dnf (Fedora/newer RHEL)..."
              sudo dnf install -y jq
            else
              echo "No supported package manager found (apt-get, yum, or dnf)"
              exit 1
            fi
          else
            echo "Unsupported OS: $RUNNER_OS"
            exit 1
          fi
        else
          echo "jq is already installed"
        fi

        echo "=== Waiting 10 seconds for tracer to gather process information ==="
        sleep 10

        echo "=== Running tracer info --json ==="
        # Use provided binary path or default tracer command
        TRACER_CMD="${{ inputs.binary }} info --json"

        if [ "${{ inputs.use_sudo }}" = "true" ]; then
          TRACER_CMD="sudo $TRACER_CMD"
        fi 

        echo "Running tracer command: $TRACER_CMD"

        TRACER_OUTPUT=$($TRACER_CMD)
        echo "$TRACER_OUTPUT"

        echo ""
        echo "=== Verifying required processes ==="

        # Parse the processes field from the JSON output
        PROCESSES=$(echo "$TRACER_OUTPUT" | jq -r '.run.processes // empty')

        if [ -z "$PROCESSES" ]; then
          echo "‚ùå ERROR: Could not find 'processes' in tracer output"
          echo "This might indicate the pipeline cannot find any processes at all"
          exit 1
        fi

        echo "Found processes: $PROCESSES"

        # Convert processes to array (split by comma and trim whitespace)
        IFS=',' read -ra PROCESSES_ARRAY <<< "$PROCESSES"
        PROCESSES_SET=()
        for proc in "${PROCESSES_ARRAY[@]}"; do
          # Trim whitespace and add to set
          trimmed=$(echo "$proc" | xargs)
          if [ -n "$trimmed" ]; then
            PROCESSES_SET+=("$trimmed")
          fi
        done

        echo "Parsed processes: ${PROCESSES_SET[*]}"

        # Select required processes based on eBPF mode
        if [ "${{ inputs.is_ebpf }}" = "true" ]; then
          required_processes="$TRACER_REQUIRED_PROCESSES_EBPF"
          echo "Using eBPF mode - Required processes: $required_processes"
        else
          required_processes="$TRACER_REQUIRED_PROCESSES_POLLING"
          echo "Using non-eBPF mode - Required processes: $required_processes"
        fi

        # Convert comma-separated required processes to array
        IFS=',' read -ra REQUIRED_ARRAY <<< "$required_processes"

        # Check each required process (exact match, order-independent)
        MISSING_PROCESSES=()
        for required_process in "${REQUIRED_ARRAY[@]}"; do
          # Trim whitespace
          required_process=$(echo "$required_process" | xargs)
          
          # Check if this required process exists in the set
          found=false
          for process in "${PROCESSES_SET[@]}"; do
            if [ "$required_process" = "$process" ]; then
              found=true
              break
            fi
          done
          
          if [ "$found" = true ]; then
            echo "‚úÖ Found required process: $required_process"
          else
            echo "‚ùå Missing required process: $required_process"
            MISSING_PROCESSES+=("$required_process")
          fi
        done

        # Report results
        if [ ${#MISSING_PROCESSES[@]} -eq 0 ]; then
          echo ""
          echo "üéâ SUCCESS: All required processes found in processes"
          echo "Required: $required_processes"
          echo "Found: $PROCESSES"
        else
          echo ""
          echo "‚ùå FAILURE: Missing required processes"
          echo "Required: $required_processes"
          echo "Found: $PROCESSES"
          echo "Missing: $(IFS=','; echo "${MISSING_PROCESSES[*]}")"
          exit 1
        fi
